 hiGraph = new HiGraph(cellWidth, cellHeight);
        hiGraph.AddArea(Area.AreaType.Labyrinth);
        hiGraph.AddArea(Area.AreaType.Labyrinth);
        hiGraph.AddArea(Area.AreaType.Garden);
        hiGraph.AddArea(Area.AreaType.Labyrinth);

        hiGraph.areas[0].AddNode(3);

        hiGraph.AddEdgeToArea(0, 0, 1, 2, Node.type.Open);
        hiGraph.AddEdgeToArea(0, 0, 2, 3, Node.type.Open);
        hiGraph.AddEdgeToArea(0, 2, 3, 3, Node.type.Open);

        hiGraph.areas[1].AddNode(1);

        hiGraph.AddEdgeToArea(1, 0, 1, 2, Node.type.Open);

        hiGraph.areas[2].AddNode(2);

        hiGraph.AddEdgeToArea(2, 1, 2, 1, Node.type.Open);
        hiGraph.AddEdgeToArea(2, 0, 1, 2, Node.type.Open);

        //hiGraph.areas[3].AddNode(1);

        hiGraph.areas[3].AddNode(4);

        hiGraph.AddEdgeToArea(3, 0, 1, 2, Node.type.Open);
        hiGraph.AddEdgeToArea(3, 1, 2, 2, Node.type.Open);
        hiGraph.AddEdgeToArea(3, 1, 3, 3, Node.type.Open);
        hiGraph.AddEdgeToArea(3, 2, 4, 3, Node.type.Open);
        hiGraph.AddEdgeToArea(3, 3, 4, 2, Node.type.Open);

        hiGraph.ConnectAreas(0, 1, 3, 0, 2, Node.type.Door);
        hiGraph.ConnectAreas(1, 2, 0, 0, 1, Node.type.Door);
        hiGraph.ConnectAreas(2, 3, 2, 0, 2, Node.type.Door);



/// Figure 1
        hiGraph = new HiGraph(cellWidth, cellHeight);
        hiGraph.AddArea(Area.AreaType.Labyrinth);
        hiGraph.AddArea(Area.AreaType.Labyrinth);
        hiGraph.AddArea(Area.AreaType.Garden);
        hiGraph.AddArea(Area.AreaType.Labyrinth);

        hiGraph.areas[0].AddNode(2);

        hiGraph.AddEdgeToArea(0, 0, 1, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 1, 2, 3, Atom.type.Open);

        hiGraph.areas[1].AddNode(8);

        hiGraph.AddEdgeToArea(1, 0, 1, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 1, 2, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 3, 0, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 4, 1, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 5, 2, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 3, 4, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 4, 5, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 6, 3, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 7, 4, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 8, 5, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 6, 7, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 7, 8, 2, Atom.type.Open);

        hiGraph.areas[2].AddNode(5);
        hiGraph.AddEdgeToArea(2, 0, 1, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(2, 0, 2, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(2, 2, 3, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(2, 1, 3, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(2, 2, 4, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(2, 3, 5, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(2, 4, 5, 2, Atom.type.Open);

        hiGraph.areas[1].AddChild(new int[] { 4, 5, 6, 7, 8 });
        hiGraph.areas[1].AddChild(new int[] { 0, 1, 2, 3 });
        hiGraph.areas[1].children[0].AddAttribute(Area.AttrType.TileProb, new string[] { "LabyrinthPath" }, new int[] { 100, -1 }, true);
        hiGraph.areas[1].children[0].AddAttribute(Area.AttrType.TileProb, new string[] { "LabyrinthReverseCorner" }, new int[] { 100, -1 }, true);
        hiGraph.areas[2].AddChild(new int[] { 0, 1, 3 });
        hiGraph.areas[2].AddChild(new int[] { 2, 4, 5 });
        hiGraph.areas[3].AddChild(new int[] { 0 });

        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TileProb, new string[] { "TownPath" }, new int[] { 100, -1 }, true);
        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TileProb, new string[] { "TownHouse" }, new int[] { 100, -1 }, true);
        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TileProb, new string[] { "TownHouse3" }, new int[] { 300, -1 }, true);
        hiGraph.areas[2].children[1].AddAttribute(Area.AttrType.TileProb, new string[] { "GardenHillDarker2" }, new int[] { 100, -1 }, true);
        hiGraph.areas[2].children[1].AddAttribute(Area.AttrType.TileProb, new string[] { "GardenDarker" }, new int[] { 500, -1 }, true);
        hiGraph.areas[2].children[1].AddAttribute(Area.AttrType.TileProb, new string[] { "GardenHillDarker1" }, new int[] { 500, -1 }, true);
        hiGraph.areas[2].children[1].AddAttribute(Area.AttrType.TileProb, new string[] { "GardenHillFunkyDarker" }, new int[] { 100, -1 }, true);
        hiGraph.areas[2].children[1].AddAttribute(Area.AttrType.TileProb, new string[] { "GardenHillExtraDarker" }, new int[] { 100, -1 }, true);
        hiGraph.areas[2].children[1].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "GardenHillDarker2", "GardenHillDarker2" }, 
            new int[] { 1, 1, 3 }, false);
        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "TownHouse4", "TownHouse4" },
            new int[] { 1, 1, 2 }, false);
        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "ExtraStart", "GardenBasic" },
            new int[] { 1, 0, 0 }, true);
        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "ExtraAlly", "TownHouse3" },
            new int[] { 1, 0, 0 }, true);  
        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "ExtraAlly", "ExtraAlly" },
            new int[] { 1, 0, 0 }, false);
        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TilePlace, new string[] { "ExtraStart" }, new int[] { 0, -1, 5, 5 }, true);
        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TilePlace, new string[] { "ExtraAlly" }, new int[] { 1, -1, 6, 6 }, true);
        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TilePlace, new string[] { "ExtraAlly" }, new int[] { 2, -1, 4, 4 }, true);
        hiGraph.areas[2].children[1].AddAttribute(Area.AttrType.TileProb, new string[] { "GardenBasic" }, new int[] { 0, -1 }, true);
        hiGraph.areas[3].AddAttribute(Area.AttrType.TileProb, new string[] { "LabyrinthBasic4" }, new int[] { 0, -1 }, true);
        hiGraph.areas[3].AddAttribute(Area.AttrType.TileProb, new string[] { "LabyrinthBasic2" }, new int[] { 0, -1 }, true);

        hiGraph.ConnectAreas(0, 1, 0, 0, 2, Atom.type.Door);
        hiGraph.ConnectAreas(0, 1, 2, 6, 2, Atom.type.Door);
        hiGraph.ConnectAreas(2, 0, 3, 1, 2, Atom.type.Door);
        hiGraph.ConnectAreas(1, 3, 5, 0, 2, Atom.type.Door);


/// Figure 2
        hiGraph = new HiGraph(cellWidth, cellHeight);
        hiGraph.AddArea(Area.AreaType.Labyrinth);
        hiGraph.AddArea(Area.AreaType.Islands);
        hiGraph.AddArea(Area.AreaType.Garden);
        hiGraph.AddArea(Area.AreaType.Labyrinth);


        hiGraph.areas[0].AddNode(5);
        hiGraph.AddEdgeToArea(0, 0, 1, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 1, 2, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 0, 3, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 1, 4, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 2, 5, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 4, 5, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 3, 4, 2, Atom.type.Open);

        hiGraph.areas[1].AddNode(2);
        hiGraph.AddEdgeToArea(1, 0, 1, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 1, 2, 2, Atom.type.Open);

        hiGraph.areas[2].AddNode(3);
        hiGraph.AddEdgeToArea(2, 0, 1, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(2, 1, 2, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(2, 2, 3, 1, Atom.type.Open);


        hiGraph.areas[3].AddNode(5);
        hiGraph.AddEdgeToArea(3, 0, 1, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(3, 1, 2, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(3, 0, 3, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(3, 1, 4, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(3, 2, 5, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(3, 4, 5, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(3, 3, 4, 2, Atom.type.Open);

        hiGraph.areas[2].AddChild(new int[] { 1, 2, 3 });

        hiGraph.areas[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "LabyrinthBasic2", "LabyrinthBasic3" },
            new int[] { 1, 3, 0 }, false);
        hiGraph.areas[3].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "LabyrinthBasic2", "LabyrinthBasic3" },
            new int[] { 1, 3, 0 }, false);
        hiGraph.areas[3].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "LabyrinthBasic4", "LabyrinthBasic4" },
            new int[] { 1, 1, 3 }, false);
        hiGraph.areas[1].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "IslandsWater2", "IslandsWater2" },
            new int[] { 1, 1, 2 }, false);
        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "ExtraChest", "GardenBasic" },
            new int[] { 1, 0, 0 }, true);
        hiGraph.areas[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "ExtraStart", "LabyrinthBasic1" },
            new int[] { 1, 0, 0 }, true);
        hiGraph.areas[3].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "ExtraEnd", "LabyrinthBasic1" },
            new int[] { 1, 0, 0 }, true);
        hiGraph.areas[2].AddAttribute(Area.AttrType.TilePlace, new string[] { "ExtraChest" }, new int[] { 3, -1, 5, 5 }, true);
        hiGraph.areas[0].AddAttribute(Area.AttrType.TilePlace, new string[] { "ExtraStart" }, new int[] { 4, -1, 5, 5 }, true);
        hiGraph.areas[3].AddAttribute(Area.AttrType.TilePlace, new string[] { "ExtraEnd" }, new int[] { 2, -1, 5, 5 }, true);
        hiGraph.areas[3].AddAttribute(Area.AttrType.TileProb, new string[] { "LabyrinthPath1" }, new int[] { 100, -1 }, true);
        hiGraph.areas[1].AddAttribute(Area.AttrType.TileProb, new string[] { "IslandsWater" }, new int[] { 100, -1 }, true);

        hiGraph.areas[2].children[0].AddAttribute(Area.AttrType.TileProb, new string[] { "RuinsStructure" }, new int[] { 100, -1 }, true);
        hiGraph.areas[2].AddAttribute(Area.AttrType.TileProb, new string[] { "GardenPath" }, new int[] { 100, -1 }, true);

        hiGraph.ConnectAreas(0, 1, 0, 0, 1, Atom.type.Wall);
        hiGraph.ConnectAreas(0, 2, 0, 0, 0, Atom.type.Door);
        hiGraph.ConnectAreas(2, 3, 2, 3, 2, Atom.type.Door);



/// Figure 3
        hiGraph = new HiGraph(cellWidth, cellHeight);
        hiGraph.AddArea(Area.AreaType.Labyrinth);
        hiGraph.AddArea(Area.AreaType.Garden);

        hiGraph.areas[0].AddNode(19);
        hiGraph.AddEdgeToArea(0, 0, 1, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 0, 2, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 3, 2, 0, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 3, 1, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 3, 4, 3, Atom.type.Open);
        
        hiGraph.AddEdgeToArea(0, 4, 5, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 5, 6, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 5, 7, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 8, 6, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 8, 7, 0, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 6, 9, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 9, 10, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 10, 11, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 10, 12, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 13, 12, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 13, 11, 0, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 11, 14, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 14, 15, 0, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 15, 16, 0, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 15, 17, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 18, 17, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 18, 16, 3, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 16, 19, 0, Atom.type.Open);
        hiGraph.AddEdgeToArea(0, 19, 1, 3, Atom.type.Open);

        hiGraph.areas[0].AddChild(new int[] { 4, 9, 14, 19 });


        hiGraph.areas[1].AddNode(3);
        hiGraph.AddEdgeToArea(1, 0, 1, 2, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 0, 2, 1, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 3, 2, 0, Atom.type.Open);
        hiGraph.AddEdgeToArea(1, 3, 1, 3, Atom.type.Open);

        hiGraph.areas[0].AddAttribute(Area.AttrType.TileProb, new string[] { "ExtraEnemy" }, new int[] { 500, -1 }, true);
        hiGraph.areas[0].AddAttribute(Area.AttrType.TileProb, new string[] { "LabyrinthReverseCorner" }, new int[] { 50, -1 }, true);
        hiGraph.areas[0].children[0].AddAttribute(Area.AttrType.TileProb, new string[] { "LabyrinthPath" }, new int[] { 100, -1 }, true);
        hiGraph.areas[1].AddAttribute(Area.AttrType.TileProb, new string[] { "GardenWater" }, new int[] { 100, -1 }, true);
        hiGraph.areas[1].AddAttribute(Area.AttrType.TileProb, new string[] { "GardenPath" }, new int[] { 100, -1 }, true);
        hiGraph.areas[1].AddAttribute(Area.AttrType.TileProb, new string[] { "RuinsStructure" }, new int[] { 100, -1 }, true);
        hiGraph.areas[1].AddAttribute(Area.AttrType.TileProb, new string[] { "GardenDock" }, new int[] { 100, -1 }, true);
        hiGraph.areas[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "ExtraEnemy", "LabyrinthBasic1" },
            new int[] { 1, 0, 0 }, true);
        hiGraph.areas[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "ExtraEnemy", "LabyrinthBasic2" },
            new int[] { 1, 0, 2 }, true);
        hiGraph.areas[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "ExtraEnemy", "ExtraEnemy" },
            new int[] { 1, 0, 0 }, false);
        hiGraph.areas[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "LabyrinthBasic2", "LabyrinthBasic3" },
            new int[] { 1, 3, 0 }, false);
        hiGraph.areas[0].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "LabyrinthBasic4", "LabyrinthBasic4" },
            new int[] { 1, 1, 3 }, false);
        hiGraph.areas[1].AddAttribute(Area.AttrType.TileAdjacency, new string[] { "GardenPath2", "GardenDoor" },
            new int[] { 1, 0, 0 }, true);
        

        hiGraph.ConnectAreas(0, 1, 3, 0, 2, Atom.type.Door);
        hiGraph.ConnectAreas(0, 1, 6, 1, 1, Atom.type.Door);
        hiGraph.ConnectAreas(0, 1, 11, 3, 0, Atom.type.Door);
        hiGraph.ConnectAreas(0, 1, 16, 2, 3, Atom.type.Door);